{"version":3,"sources":["components/isAzure/index.jsx","@core/components/breadcrumbs/index.js","views/clientes/dominios/form/index.jsx"],"names":["jwt","require","isAzure","navigate","useNavigate","isAuthenticated","useIsAuthenticated","useEffect","verify","getToken","BreadCrumbs","props","data","title","className","tag","to","map","item","index","Wrapper","link","Link","Fragment","isLastItem","length","active","classnames","MySwal","withReactContent","Swal","DominiosForm","id","useParams","useState","setCliente","setDominio","setData","useForm","reset","control","handleSubmit","setError","formState","errors","undefined","httpRequest","method","token","then","res","body","dominio","sm","onSubmit","dados","cliente_id","fire","icon","text","customClass","confirmButton","xl","md","for","defaultValue","name","render","field","placeholder","type","color"],"mappings":"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","file":"static/js/45.237334b9.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useIsAuthenticated } from \"@azure/msal-react\";\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nimport { getToken } from \"../../services/Auth\";\r\n\r\nconst isAzure = () => {\r\n  let navigate = useNavigate();\r\n  const isAuthenticated = useIsAuthenticated();\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      navigate(\"/login\");\r\n    }else{\r\n      const payload = jwt.verify(getToken(), \"aIebX2X9oCZE1gCNFlE0lSxPAKVqJfL7+8WUcMVcz677+V6JnRomzKfg03EIR6VlSAf2kWQSiiTDP8MF3Js7is9i7+YdCPTw+sifbuNeeCZWLr1QJCrGaRacvD4qKzzpXNkNeKhDv0h6rQW/JJ8dX94rK5esVxtbupCptX8HzfL8rmUSLI/l78ddYfkb+RkuHH5PY8TYpdUBv1h3qUYo4L62QUX/Ze5wqhYUuhPvmOAYIoz7j4SABxT2JciOn9Wy1wraZ268VzhgLilykQBH5QC6lbNyfIegB79R0QYQrYk5IL1gfmxY2lKIDeCYB9p8NIF8qfCyD/RJMQOUEv9z9A==\");\r\n      if(!payload) {\r\n        navigate(\"/login\");\r\n      }\r\n    }\r\n  }, [isAuthenticated]);\r\n}\r\n\r\nexport default isAzure;","// ** React Imports\r\nimport { Fragment } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n// ** Third Party Components\r\nimport Proptypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem\r\n} from \"reactstrap\"\r\n\r\nconst BreadCrumbs = (props) => {\r\n  // ** Props\r\n  const { data, title } = props\r\n\r\n  const renderBreadCrumbs = () => {\r\n    return data.map((item, index) => {\r\n      const Wrapper = item.link ? Link : Fragment\r\n      const isLastItem = data.length - 1 === index\r\n      return (\r\n        <BreadcrumbItem\r\n          tag=\"li\"\r\n          key={index}\r\n          active={!isLastItem}\r\n          className={classnames({ \"text-primary\": !isLastItem })}\r\n        >\r\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\r\n            {item.title}\r\n          </Wrapper>\r\n        </BreadcrumbItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"content-header row\">\r\n      <div className=\"content-header-left col-md-9 col-12 mb-2\">\r\n        <div className=\"row breadcrumbs-top\">\r\n          <div className=\"col-12\">\r\n            {title ? (\r\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag=\"li\">\r\n                  <Link to=\"/\">Home</Link>\r\n                </BreadcrumbItem>\r\n                {renderBreadCrumbs()}\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  data: Proptypes.arrayOf(\r\n    Proptypes.shape({\r\n      link: Proptypes.string,\r\n      title: Proptypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { selectThemeColors } from \"@utils\";\r\n\r\n// ** Custom Components\r\nimport Breadcrumbs from \"@components/breadcrumbs\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport classnames from \"classnames\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nconst MySwal = withReactContent(Swal);\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//components\r\nimport isAzure from \"../../../../components/isAzure\";\r\nimport { getToken } from \"../../../../services/Auth\";\r\nimport { httpRequest } from \"../../../../services/Api\";\r\n\r\nconst DominiosForm = () => {\r\n  let navigate = useNavigate();\r\n\r\n  let { id } = useParams();\r\n  let { item } = useParams();\r\n  const [cliente, setCliente] = useState(null);\r\n  const [contato, setDominio] = useState(null);\r\n  const [data, setData] = useState(null);\r\n\r\n  isAzure();\r\n\r\n  const {\r\n    reset,\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  if (id === undefined) {\r\n    navigate(`/clientes`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    httpRequest(`clientes/${id}`, {\r\n      method: \"GET\",\r\n      token: getToken(),\r\n    }).then((res) => {\r\n      setCliente(res.body);\r\n    });\r\n  }, []);\r\n\r\n  if (item !== undefined) {\r\n    useEffect(() => {\r\n      httpRequest(`clientes/dominios/${item}`, {\r\n        method: \"GET\",\r\n        token: getToken(),\r\n      }).then((res) => {\r\n        reset({\r\n          dominio: res.body.dominio,\r\n        });\r\n        setDominio(res.body);\r\n      });\r\n    }, []);\r\n  }\r\n\r\n  const onSubmit = (data) => {\r\n    setData(data);\r\n    if (data.dominio !== \"\") {\r\n      const dados = {\r\n        cliente_id: id,\r\n        dominio: data.dominio\r\n      };\r\n      if (item === undefined) {\r\n        httpRequest(`clientes/dominios`, {\r\n          method: \"POST\",\r\n          body: dados,\r\n          token: getToken(),\r\n        }).then((res) => {\r\n          MySwal.fire({\r\n            icon: \"success\",\r\n            title: \"Sucesso!\",\r\n            text: \"Cadastro realizada com sucesso.\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-success\",\r\n            },\r\n          });\r\n          navigate(`/clientes/dominios/${id}`);\r\n        });\r\n      } else {\r\n        httpRequest(`clientes/dominios/${item}`, {\r\n          method: \"PUT\",\r\n          body: dados,\r\n          token: getToken(),\r\n        }).then((res) => {\r\n          MySwal.fire({\r\n            icon: \"success\",\r\n            title: \"Sucesso!\",\r\n            text: \"Cadastro atualizado com sucesso.\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-success\",\r\n            },\r\n          });\r\n          navigate(`/clientes/dominios/${id}`);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs\r\n        title=\"Clientes\"\r\n        data={[\r\n          { title: \"Clientes\", link: \"/clientes\" },\r\n          //{ title: `${cliente.nome_fantasia}`, link: `/clientes/form/${id}` },\r\n          { title: \"Contatos\", link: `/clientes/dominios/${id}` },\r\n          { title: \"Novo Domínio\" },\r\n        ]}\r\n      />\r\n      <Row>\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <Row>\r\n                  <Col className=\"mb-1\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                    <Label className=\"form-label\" for=\"nome\">\r\n                      Nome\r\n                    </Label>\r\n                    <Controller\r\n                      defaultValue=\"\"\r\n                      control={control}\r\n                      id=\"dominio\"\r\n                      name=\"dominio\"\r\n                      render={({ field }) => (\r\n                        <Input\r\n                          placeholder=\"Domínio\"\r\n                          className={classnames(\"form-control\", {\r\n                            \"is-invalid\":\r\n                              data !== null &&\r\n                              (data.dominio === null || !data.dominio.length),\r\n                          })}\r\n                          {...field}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <div className=\" text-end w-100\">\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Salvar\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DominiosForm;\r\n"],"sourceRoot":""}