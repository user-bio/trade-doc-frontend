{"version":3,"sources":["views/clientes/dominios/form/index.jsx","components/isAzure/index.jsx","@core/components/breadcrumbs/index.js"],"names":["MySwal","withReactContent","Swal","DominiosForm","navigate","useNavigate","id","useParams","item","_useState","useState","_useState2","_slicedToArray","setCliente","_useState3","_useState4","setDominio","_useState5","_useState6","data","setData","isAzure","_useForm","useForm","reset","control","handleSubmit","setError","formState","errors","undefined","useEffect","httpRequest","concat","method","token","getToken","then","res","body","dominio","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","link","Row","Col","sm","Card","CardBody","Form","onSubmit","dados","cliente_id","fire","icon","text","customClass","confirmButton","className","xl","md","Label","for","Controller","defaultValue","name","render","_ref","field","Input","_objectSpread","placeholder","classnames","length","Button","type","color","jwt","require","isAuthenticated","useIsAuthenticated","verify","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","index","Wrapper","isLastItem","active"],"mappings":"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","file":"static/js/49.767c998d.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { selectThemeColors } from \"@utils\";\r\n\r\n// ** Custom Components\r\nimport Breadcrumbs from \"@components/breadcrumbs\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport classnames from \"classnames\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nconst MySwal = withReactContent(Swal);\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//components\r\nimport isAzure from \"../../../../components/isAzure\";\r\nimport { getToken } from \"../../../../services/Auth\";\r\nimport { httpRequest } from \"../../../../services/Api\";\r\n\r\nconst DominiosForm = () => {\r\n  let navigate = useNavigate();\r\n\r\n  let { id } = useParams();\r\n  let { item } = useParams();\r\n  const [cliente, setCliente] = useState(null);\r\n  const [contato, setDominio] = useState(null);\r\n  const [data, setData] = useState(null);\r\n\r\n  isAzure();\r\n\r\n  const {\r\n    reset,\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  if (id === undefined) {\r\n    navigate(`/clientes`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    httpRequest(`clientes/${id}`, {\r\n      method: \"GET\",\r\n      token: getToken(),\r\n    }).then((res) => {\r\n      setCliente(res.body);\r\n    });\r\n  }, []);\r\n\r\n  if (item !== undefined) {\r\n    useEffect(() => {\r\n      httpRequest(`clientes/dominios/${item}`, {\r\n        method: \"GET\",\r\n        token: getToken(),\r\n      }).then((res) => {\r\n        reset({\r\n          dominio: res.body.dominio,\r\n        });\r\n        setDominio(res.body);\r\n      });\r\n    }, []);\r\n  }\r\n\r\n  const onSubmit = (data) => {\r\n    setData(data);\r\n    if (data.dominio !== \"\") {\r\n      const dados = {\r\n        cliente_id: id,\r\n        dominio: data.dominio\r\n      };\r\n      if (item === undefined) {\r\n        httpRequest(`clientes/dominios`, {\r\n          method: \"POST\",\r\n          body: dados,\r\n          token: getToken(),\r\n        }).then((res) => {\r\n          MySwal.fire({\r\n            icon: \"success\",\r\n            title: \"Sucesso!\",\r\n            text: \"Cadastro realizada com sucesso.\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-success\",\r\n            },\r\n          });\r\n          navigate(`/clientes/dominios/${id}`);\r\n        });\r\n      } else {\r\n        httpRequest(`clientes/dominios/${item}`, {\r\n          method: \"PUT\",\r\n          body: dados,\r\n          token: getToken(),\r\n        }).then((res) => {\r\n          MySwal.fire({\r\n            icon: \"success\",\r\n            title: \"Sucesso!\",\r\n            text: \"Cadastro atualizado com sucesso.\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-success\",\r\n            },\r\n          });\r\n          navigate(`/clientes/dominios/${id}`);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs\r\n        title=\"Clientes\"\r\n        data={[\r\n          { title: \"Clientes\", link: \"/clientes\" },\r\n          //{ title: `${cliente.nome_fantasia}`, link: `/clientes/form/${id}` },\r\n          { title: \"Contatos\", link: `/clientes/dominios/${id}` },\r\n          { title: \"Novo Domínio\" },\r\n        ]}\r\n      />\r\n      <Row>\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <Row>\r\n                  <Col className=\"mb-1\" xl=\"12\" md=\"12\" sm=\"12\">\r\n                    <Label className=\"form-label\" for=\"nome\">\r\n                      Nome\r\n                    </Label>\r\n                    <Controller\r\n                      defaultValue=\"\"\r\n                      control={control}\r\n                      id=\"dominio\"\r\n                      name=\"dominio\"\r\n                      render={({ field }) => (\r\n                        <Input\r\n                          placeholder=\"Domínio\"\r\n                          className={classnames(\"form-control\", {\r\n                            \"is-invalid\":\r\n                              data !== null &&\r\n                              (data.dominio === null || !data.dominio.length),\r\n                          })}\r\n                          {...field}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <div className=\" text-end w-100\">\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Salvar\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DominiosForm;\r\n","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useIsAuthenticated } from \"@azure/msal-react\";\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nimport { getToken } from \"../../services/Auth\";\r\n\r\nconst isAzure = () => {\r\n  let navigate = useNavigate();\r\n  const isAuthenticated = useIsAuthenticated();\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      navigate(\"/login\");\r\n    }else{\r\n      const payload = jwt.verify(getToken(), \"aIebX2X9oCZE1gCNFlE0lSxPAKVqJfL7+8WUcMVcz677+V6JnRomzKfg03EIR6VlSAf2kWQSiiTDP8MF3Js7is9i7+YdCPTw+sifbuNeeCZWLr1QJCrGaRacvD4qKzzpXNkNeKhDv0h6rQW/JJ8dX94rK5esVxtbupCptX8HzfL8rmUSLI/l78ddYfkb+RkuHH5PY8TYpdUBv1h3qUYo4L62QUX/Ze5wqhYUuhPvmOAYIoz7j4SABxT2JciOn9Wy1wraZ268VzhgLilykQBH5QC6lbNyfIegB79R0QYQrYk5IL1gfmxY2lKIDeCYB9p8NIF8qfCyD/RJMQOUEv9z9A==\");\r\n      if(!payload) {\r\n        navigate(\"/login\");\r\n      }\r\n    }\r\n  }, [isAuthenticated]);\r\n}\r\n\r\nexport default isAzure;","// ** React Imports\r\nimport { Fragment } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n// ** Third Party Components\r\nimport Proptypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem\r\n} from \"reactstrap\"\r\n\r\nconst BreadCrumbs = (props) => {\r\n  // ** Props\r\n  const { data, title } = props\r\n\r\n  const renderBreadCrumbs = () => {\r\n    return data.map((item, index) => {\r\n      const Wrapper = item.link ? Link : Fragment\r\n      const isLastItem = data.length - 1 === index\r\n      return (\r\n        <BreadcrumbItem\r\n          tag=\"li\"\r\n          key={index}\r\n          active={!isLastItem}\r\n          className={classnames({ \"text-primary\": !isLastItem })}\r\n        >\r\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\r\n            {item.title}\r\n          </Wrapper>\r\n        </BreadcrumbItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"content-header row\">\r\n      <div className=\"content-header-left col-md-9 col-12 mb-2\">\r\n        <div className=\"row breadcrumbs-top\">\r\n          <div className=\"col-12\">\r\n            {title ? (\r\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag=\"li\">\r\n                  <Link to=\"/\">Home</Link>\r\n                </BreadcrumbItem>\r\n                {renderBreadCrumbs()}\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  data: Proptypes.arrayOf(\r\n    Proptypes.shape({\r\n      link: Proptypes.string,\r\n      title: Proptypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n"],"sourceRoot":""}