{"version":3,"sources":["redux/navbar.js","redux/rootReducer.js","redux/store.js","utility/context/ThemeColors.js","@core/components/spinner/Fallback-spinner.js","@core/components/ripple-button/index.js","serviceWorker.js","index.js","configs/themeConfig.js","assets/images/logo/logo.png","redux/layout.js","configs/authConfig.js"],"names":["getBookmarks","createAsyncThunk","axios","get","response","data","suggestions","bookmarks","updateBookmarked","id","post","layoutSlice","createSlice","name","initialState","query","reducers","handleSearchQuery","state","action","payload","extraReducers","builder","addCase","fulfilled","objectToUpdate","find","item","isBookmarked","bookmarkIndex","findIndex","x","push","splice","rootReducer","actions","navbar","layout","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ThemeColors","createContext","ThemeContext","children","useState","colors","setColors","useEffect","window","getHex","color","getComputedStyle","document","body","getPropertyValue","trim","obj","primary","light","concat","main","secondary","success","danger","warning","info","dark","Provider","value","SpinnerComponent","className","src","logo","alt","Button","Ripple","onClick","rest","mounted","setMounted","isRippling","setIsRippling","y","coords","setCoords","setTimeout","classnames","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","style","Boolean","location","hostname","match","LazyApp","lazy","container","getElementById","root","createRoot","msalInstance","PublicClientApplication","msalConfig","render","instance","fallback","position","themeConfig","toastPosition","toastOptions","navigator","serviceWorker","ready","then","registration","unregister","app","appName","appLogoImage","require","default","isRTL","skin","type","contentWidth","menu","isHidden","isCollapsed","backgroundColor","footer","customizer","scrollTop","localStorage","getItem","JSON","parse","initialSkin","initialDirection","lastLayout","menuCollapsed","initialMenuCollapsed","footerType","navbarType","menuHidden","navbarColor","handleRTL","setItem","stringify","handleSkin","handleLayout","handleFooterType","handleNavbarType","handleMenuHidden","handleLastLayout","handleNavbarColor","handleContentWidth","handleMenuCollapsed","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","loginRequest","scopes"],"mappings":"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","file":"static/js/main.74309833.chunk.js","sourcesContent":["// ** Redux Imports\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\n\r\n// ** Axios Imports\r\nimport axios from \"axios\"\r\n\r\nexport const getBookmarks = createAsyncThunk(\r\n  \"layout/getBookmarks\",\r\n  async () => {\r\n    const response = await axios.get(\"/api/bookmarks/data\")\r\n    return {\r\n      data: response.data.suggestions,\r\n      bookmarks: response.data.bookmarks\r\n    }\r\n  }\r\n)\r\n\r\nexport const updateBookmarked = createAsyncThunk(\r\n  \"layout/updateBookmarked\",\r\n  async (id) => {\r\n    await axios.post(\"/api/bookmarks/update\", { id })\r\n    return id\r\n  }\r\n)\r\n\r\nexport const layoutSlice = createSlice({\r\n  name: \"layout\",\r\n  initialState: {\r\n    query: \"\",\r\n    bookmarks: [],\r\n    suggestions: []\r\n  },\r\n  reducers: {\r\n    handleSearchQuery: (state, action) => {\r\n      state.query = action.payload\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getBookmarks.fulfilled, (state, action) => {\r\n        state.suggestions = action.payload.data\r\n        state.bookmarks = action.payload.bookmarks\r\n      })\r\n      .addCase(updateBookmarked.fulfilled, (state, action) => {\r\n        let objectToUpdate\r\n\r\n        // ** find & update object\r\n        state.suggestions.find((item) => {\r\n          if (item.id === action.payload) {\r\n            item.isBookmarked = !item.isBookmarked\r\n            objectToUpdate = item\r\n          }\r\n        })\r\n\r\n        // ** Get index to add or remove bookmark from array\r\n        const bookmarkIndex = state.bookmarks.findIndex(\r\n          (x) => x.id === action.payload\r\n        )\r\n\r\n        if (bookmarkIndex === -1) {\r\n          state.bookmarks.push(objectToUpdate)\r\n        } else {\r\n          state.bookmarks.splice(bookmarkIndex, 1)\r\n        }\r\n      })\r\n  }\r\n})\r\n\r\nexport const { handleSearchQuery } = layoutSlice.actions\r\n\r\nexport default layoutSlice.reducer\r\n","// ** Reducers Imports\r\nimport layout from \"./layout\"\r\nimport navbar from \"./navbar\"\r\n\r\nconst rootReducer = { navbar, layout }\r\n\r\nexport default rootReducer\r\n","// ** Redux Imports\r\nimport rootReducer from \"./rootReducer\"\r\nimport { configureStore } from \"@reduxjs/toolkit\"\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => {\r\n    return getDefaultMiddleware({\r\n      serializableCheck: false\r\n    })\r\n  }\r\n})\r\n\r\nexport { store }\r\n","// ** React Imports\r\nimport { useEffect, useState, createContext } from \"react\"\r\n\r\n// ** Create Context\r\nconst ThemeColors = createContext()\r\n\r\nconst ThemeContext = ({ children }) => {\r\n  // ** State\r\n  const [colors, setColors] = useState({})\r\n\r\n  //** ComponentDidMount\r\n  useEffect(() => {\r\n    if (window !== \"undefined\") {\r\n      //** Get variable value\r\n      const getHex = (color) => window.getComputedStyle(document.body).getPropertyValue(color).trim()\r\n\r\n      //** Colors obj\r\n      const obj = {\r\n        primary: {\r\n          light: getHex(\"--bs-primary\").concat(\"1a\"),\r\n          main: getHex(\"--bs-primary\")\r\n        },\r\n        secondary: {\r\n          light: getHex(\"--bs-secondary\").concat(\"1a\"),\r\n          main: getHex(\"--bs-secondary\")\r\n        },\r\n        success: {\r\n          light: getHex(\"--bs-success\").concat(\"1a\"),\r\n          main: getHex(\"--bs-success\")\r\n        },\r\n        danger: {\r\n          light: getHex(\"--bs-danger\").concat(\"1a\"),\r\n          main: getHex(\"--bs-danger\")\r\n        },\r\n        warning: {\r\n          light: getHex(\"--bs-warning\").concat(\"1a\"),\r\n          main: getHex(\"--bs-warning\")\r\n        },\r\n        info: {\r\n          light: getHex(\"--bs-info\").concat(\"1a\"),\r\n          main: getHex(\"--bs-info\")\r\n        },\r\n        dark: {\r\n          light: getHex(\"--bs-dark\").concat(\"1a\"),\r\n          main: getHex(\"--bs-dark\")\r\n        }\r\n      }\r\n\r\n      setColors({ ...obj })\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <ThemeColors.Provider value={{ colors }}>{children}</ThemeColors.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeColors, ThemeContext }\r\n","// ** Logo\r\nimport logo from \"@src/assets/images/logo/logo.png\"\r\n\r\nconst SpinnerComponent = () => {\r\n  return (\r\n    <div className=\"fallback-spinner app-loader\">\r\n      <img className=\"fallback-logo\" src={logo} alt=\"logo\" />\r\n      <div className=\"loading\">\r\n        <div className=\"effect-1 effects\"></div>\r\n        <div className=\"effect-2 effects\"></div>\r\n        <div className=\"effect-3 effects\"></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SpinnerComponent\r\n","// ** React Imports\r\nimport { useState, useEffect } from \"react\"\r\n\r\n// ** Third Party Components\r\nimport classnames from \"classnames\"\r\n\r\n// ** Reactstrap Imports\r\nimport { Button } from \"reactstrap\"\r\n\r\n// ** Styles\r\nimport \"./ripple-button.scss\"\r\n\r\nconst RippleButton = ({ className, children, onClick, ...rest }) => {\r\n  // ** States\r\n  const [mounted, setMounted] = useState(false)\r\n  const [isRippling, setIsRippling] = useState(false)\r\n  const [coords, setCoords] = useState({ x: -1, y: -1 })\r\n\r\n  // ** Toggle mounted on mount & unmount\r\n  useEffect(() => {\r\n    setMounted(true)\r\n    return () => setMounted(false)\r\n  }, [])\r\n\r\n  // ** Check for coords and set ripple\r\n  useEffect(() => {\r\n    if (mounted) {\r\n      if (coords.x !== -1 && coords.y !== -1) {\r\n        setIsRippling(true)\r\n        setTimeout(() => setIsRippling(false), 500)\r\n      } else {\r\n        setIsRippling(false)\r\n      }\r\n    }\r\n  }, [coords])\r\n\r\n  // ** Reset Coords on ripple end\r\n  useEffect(() => {\r\n    if (mounted) {\r\n      if (!isRippling) setCoords({ x: -1, y: -1 })\r\n    }\r\n  }, [isRippling])\r\n\r\n  return (\r\n    <Button\r\n      className={classnames(\"waves-effect\", {\r\n        [className]: className\r\n      })}\r\n      onClick={(e) => {\r\n        const rect = e.target.getBoundingClientRect()\r\n        setCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top })\r\n        if (onClick) {\r\n          onClick(e)\r\n        }\r\n      }}\r\n      {...rest}\r\n    >\r\n      {children}\r\n      {isRippling ? (\r\n        <span\r\n          className=\"waves-ripple\"\r\n          style={{\r\n            left: coords.x,\r\n            top: coords.y\r\n          }}\r\n        ></span>\r\n      ) : null}\r\n    </Button>\r\n  )\r\n}\r\n\r\n// ** PropTypes\r\nRippleButton.propTypes = {\r\n  ...Button.propTypes\r\n}\r\n\r\nButton.Ripple = RippleButton\r\n","/*eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker === null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// ** React Imports\r\nimport { Suspense, lazy } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n// ** Redux Imports\r\nimport { store } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\n// ** ThemeColors Context\r\n\r\nimport { ThemeContext } from \"./utility/context/ThemeColors\";\r\n\r\n// ** ThemeConfig\r\nimport themeConfig from \"./configs/themeConfig\";\r\n\r\n// ** Toast\r\nimport { Toaster } from \"react-hot-toast\";\r\n\r\n// ** Spinner (Splash Screen)\r\nimport Spinner from \"./@core/components/spinner/Fallback-spinner\";\r\n\r\n// ** Ripple Button\r\nimport \"./@core/components/ripple-button\";\r\n\r\n// ** PrismJS\r\nimport \"prismjs\";\r\nimport \"prismjs/themes/prism-tomorrow.css\";\r\nimport \"prismjs/components/prism-jsx.min\";\r\n\r\n// ** React Perfect Scrollbar\r\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\r\n\r\n// ** React Hot Toast Styles\r\nimport \"@styles/react/libs/react-hot-toasts/react-hot-toasts.scss\";\r\n\r\n// ** Core styles\r\nimport \"./@core/assets/fonts/feather/iconfont.css\";\r\nimport \"./@core/scss/core.scss\";\r\nimport \"./assets/scss/style.scss\";\r\n\r\n// ** Service Worker\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// ** Lazy load app\r\nconst LazyApp = lazy(() => import(\"./App\"));\r\n\r\nconst container = document.getElementById(\"root\");\r\nconst root = createRoot(container);\r\n\r\n//azure\r\nimport { PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { msalConfig } from \"./configs/authConfig\";\r\n\r\nconst msalInstance = new PublicClientApplication(msalConfig);\r\n\r\nroot.render(\r\n  <MsalProvider instance={msalInstance}>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <Suspense fallback={<Spinner />}>\r\n          <ThemeContext>\r\n            <LazyApp />\r\n            <Toaster\r\n              position={themeConfig.layout.toastPosition}\r\n              toastOptions={{ className: \"react-hot-toast\" }}\r\n            />\r\n          </ThemeContext>\r\n        </Suspense>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </MsalProvider>\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// You can customize the template with the help of this file\r\n\r\n//Template config options\r\nconst themeConfig = {\r\n  app: {\r\n    appName: \"Bioseta\",\r\n    appLogoImage: require(\"@src/assets/images/logo/logo.png\").default\r\n  }, \r\n  layout: {\r\n    isRTL: false,\r\n    skin: \"light\", // light, dark, bordered, semi-dark\r\n    type: \"vertical\", // vertical, horizontal\r\n    contentWidth: \"boxed\", // full, boxed\r\n    menu: {\r\n      isHidden: false,\r\n      isCollapsed: false\r\n    },\r\n    navbar: {\r\n      // ? For horizontal menu, navbar type will work for navMenu type\r\n      type: \"floating\", // static , sticky , floating, hidden\r\n      backgroundColor: \"white\" // BS color options [primary, success, etc]\r\n    },\r\n    footer: {\r\n      type: \"static\" // static, sticky, hidden\r\n    },\r\n    customizer: false,\r\n    scrollTop: true, // Enable scroll to top button\r\n    toastPosition: \"top-right\" // top-left, top-center, top-right, bottom-left, bottom-center, bottom-right\r\n  }\r\n}\r\n\r\nexport default themeConfig\r\n","export default __webpack_public_path__ + \"static/media/logo.5d431fb9.png\";","// ** Redux Imports\r\nimport { createSlice } from \"@reduxjs/toolkit\"\r\n\r\n// ** ThemeConfig Import\r\nimport themeConfig from \"@configs/themeConfig\"\r\n\r\nconst initialMenuCollapsed = () => {\r\n  const item = window.localStorage.getItem(\"menuCollapsed\")\r\n  //** Parse stored json or if none return initialValue\r\n  return item ? JSON.parse(item) : themeConfig.layout.menu.isCollapsed\r\n}\r\n\r\nconst initialDirection = () => {\r\n  const item = window.localStorage.getItem(\"direction\")\r\n  //** Parse stored json or if none return initialValue\r\n  return item ? JSON.parse(item) : themeConfig.layout.isRTL\r\n}\r\n\r\nconst initialSkin = () => {\r\n  const item = window.localStorage.getItem(\"skin\")\r\n  //** Parse stored json or if none return initialValue\r\n  return item ? JSON.parse(item) : themeConfig.layout.skin\r\n}\r\n\r\nexport const layoutSlice = createSlice({\r\n  name: \"layout\",\r\n  initialState: {\r\n    skin: initialSkin(),\r\n    isRTL: initialDirection(),\r\n    layout: themeConfig.layout.type,\r\n    lastLayout: themeConfig.layout.type,\r\n    menuCollapsed: initialMenuCollapsed(),\r\n    footerType: themeConfig.layout.footer.type,\r\n    navbarType: themeConfig.layout.navbar.type,\r\n    menuHidden: themeConfig.layout.menu.isHidden,\r\n    contentWidth: themeConfig.layout.contentWidth,\r\n    navbarColor: themeConfig.layout.navbar.backgroundColor\r\n  },\r\n  reducers: {\r\n    handleRTL: (state, action) => {\r\n      state.isRTL = action.payload\r\n      window.localStorage.setItem(\"direction\", JSON.stringify(action.payload))\r\n    },\r\n    handleSkin: (state, action) => {\r\n      state.skin = action.payload\r\n      window.localStorage.setItem(\"skin\", JSON.stringify(action.payload))\r\n    },\r\n    handleLayout: (state, action) => {\r\n      state.layout = action.payload\r\n    },\r\n    handleFooterType: (state, action) => {\r\n      state.footerType = action.payload\r\n    },\r\n    handleNavbarType: (state, action) => {\r\n      state.navbarType = action.payload\r\n    },\r\n    handleMenuHidden: (state, action) => {\r\n      state.menuHidden = action.payload\r\n    },\r\n    handleLastLayout: (state, action) => {\r\n      state.lastLayout = action.payload\r\n    },\r\n    handleNavbarColor: (state, action) => {\r\n      state.navbarColor = action.payload\r\n    },\r\n    handleContentWidth: (state, action) => {\r\n      state.contentWidth = action.payload\r\n    },\r\n    handleMenuCollapsed: (state, action) => {\r\n      state.menuCollapsed = action.payload\r\n      window.localStorage.setItem(\r\n        \"menuCollapsed\",\r\n        JSON.stringify(action.payload)\r\n      )\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  handleRTL,\r\n  handleSkin,\r\n  handleLayout,\r\n  handleLastLayout,\r\n  handleMenuHidden,\r\n  handleNavbarType,\r\n  handleFooterType,\r\n  handleNavbarColor,\r\n  handleContentWidth,\r\n  handleMenuCollapsed\r\n} = layoutSlice.actions\r\n\r\nexport default layoutSlice.reducer\r\n","// export const msalConfig = {\n//   auth: {\n//     clientId: \"bcb98145-16d8-4bc3-93f3-9a768c35c7b1\",\n//     authority: \"https://login.microsoftonline.com/834b7c70-3687-4751-aa2e-ef3bed9f9d25\", // This is a URL (e.g. https://login.microsoftonline.com/{your tenant ID})\n//     redirectUri: \"https://bioseta.s3digital.com.br/login\",\n//   },\n//   cache: {\n//     cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n//     storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n//   }\n// };\n\n// export const msalConfig = {\n//   auth: {\n//     clientId: \"13b51e74-e98f-4a39-a119-444cf0dd87da\",\n//     authority: \"https://login.microsoftonline.com/834b7c70-3687-4751-aa2e-ef3bed9f9d25\", // This is a URL (e.g. https://login.microsoftonline.com/{your tenant ID})\n//     redirectUri: \"http://localhost:3000/login\",\n//   },\n//   cache: {\n//     cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n//     storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n//   }\n// };\n\nexport const msalConfig = {\n  auth: {\n    clientId: \"f22d5fc7-ad7c-49b6-baee-599522c1a6f7\",\n    authority: \"https://login.microsoftonline.com/834b7c70-3687-4751-aa2e-ef3bed9f9d25\", // This is a URL (e.g. https://login.microsoftonline.com/{your tenant ID})\n    redirectUri: \"https://tradedoc.bioseta.com.br/login\",\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n    storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n  }\n};\n  \n  // Add scopes here for ID token to be used at Microsoft identity platform endpoints.\n  export const loginRequest = {\n   scopes: [\"user.read\", \"mail.send\"]\n  };\n  \n  // Add the endpoints here for Microsoft Graph API services you'd like to use.\n  export const graphConfig = {\n      graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n  };"],"sourceRoot":""}