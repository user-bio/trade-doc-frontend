{"version":3,"sources":["views/documentos/merge/form/index.jsx","components/isAzure/index.jsx","@core/components/breadcrumbs/index.js"],"names":["MySwal","withReactContent","Swal","DocumentosMergeForm","navigate","useNavigate","id","useParams","item","_useState","useState","_useState2","_slicedToArray","selectTipo","setselectTipo","_useState3","_useState4","setPara","_useState5","_useState6","data","setData","isAzure","_useForm","useForm","reset","control","handleSubmit","setError","setValue","formState","errors","undefined","useEffect","httpRequest","method","token","getToken","then","res","objTipos","body","map","tipo","push","value","label","nome","concat","ordem","merge_id","Documentos_Tipo","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","link","Row","Col","sm","Card","CardBody","Form","onSubmit","tipo_funcionario","dados","documento_tipo_id","fire","icon","text","customClass","confirmButton","className","xl","md","Label","for","Controller","name","render","_ref","field","Select","_objectSpread","options","classNamePrefix","theme","selectThemeColors","classnames","isDisabled","defaultValue","_ref2","Input","placeholder","Button","type","color","jwt","require","isAuthenticated","useIsAuthenticated","verify","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","index","Wrapper","isLastItem","length","active"],"mappings":"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","file":"static/js/48.9346b744.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { selectThemeColors } from \"@utils\";\r\n\r\n// ** Custom Components\r\nimport Breadcrumbs from \"@components/breadcrumbs\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport classnames from \"classnames\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nconst MySwal = withReactContent(Swal);\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//components\r\nimport isAzure from \"../../../../components/isAzure\";\r\nimport { getToken } from \"../../../../services/Auth\";\r\nimport { httpRequest } from \"../../../../services/Api\";\r\n\r\nconst DocumentosMergeForm = () => {\r\n  let navigate = useNavigate();\r\n\r\n  let { id } = useParams();\r\n  let { item } = useParams();\r\n  //const [documentoTipo, setDocumentoTipo] = useState(null);\r\n  const [selectTipo, setselectTipo] = useState([]);\r\n  const [para, setPara] = useState(null);\r\n  const [data, setData] = useState(null);\r\n\r\n  isAzure();\r\n\r\n  const statusOPT = [\r\n    { value: \"empresa\", label: \"empresa\" },\r\n    { value: \"funcionario\", label: \"funcionario\" },\r\n  ];\r\n\r\n  const {\r\n    reset,\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm({  });\r\n\r\n  if (id === undefined) {\r\n    navigate(`/clientes`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    httpRequest(`documentos/tipos?tipo=normal`, {\r\n      method: \"GET\",\r\n      token: getToken(),\r\n    }).then((res) => {\r\n      const objTipos = [];\r\n      res.body.map((tipo) => {\r\n        objTipos.push({\r\n          value: tipo.id,\r\n          label: tipo.nome,\r\n        });\r\n      });\r\n      setselectTipo(objTipos);\r\n    });\r\n  }, []);\r\n\r\n  if (item !== undefined) {\r\n    useEffect(() => {\r\n      httpRequest(`documentos/tipos/merge/${item}`, {\r\n        method: \"GET\",\r\n        token: getToken(),\r\n      }).then((res) => {\r\n        reset({\r\n          ordem: res.body.ordem,\r\n        });\r\n        setValue(\"tipo\", {\r\n          value: res.body.merge_id,\r\n          label: res.body.Documentos_Tipo.nome,\r\n        });\r\n        setPara(res.body);\r\n      });\r\n    }, []);\r\n  }\r\n\r\n  const onSubmit = (data) => {\r\n    setData(data);\r\n    if (data.tipo !== undefined && data.tipo_funcionario != \"\") {\r\n      const dados = {\r\n        documento_tipo_id: id,\r\n        merge_id: data.tipo.value,\r\n        ordem: data.ordem,\r\n      };\r\n      if (item === undefined) {\r\n        httpRequest(`documentos/tipos/merge`, {\r\n          method: \"POST\",\r\n          body: dados,\r\n          token: getToken(),\r\n        }).then((res) => {\r\n          MySwal.fire({\r\n            icon: \"success\",\r\n            title: \"Sucesso!\",\r\n            text: \"Cadastro realizada com sucesso.\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-success\",\r\n            },\r\n          });\r\n          navigate(`/documento/tipos/merge/${id}`);\r\n        });\r\n      } else {\r\n        httpRequest(`documentos/tipos/merge/${item}`, {\r\n          method: \"PUT\",\r\n          body: dados,\r\n          token: getToken(),\r\n        }).then((res) => {\r\n          MySwal.fire({\r\n            icon: \"success\",\r\n            title: \"Sucesso!\",\r\n            text: \"Cadastro atualizado com sucesso.\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-success\",\r\n            },\r\n          });\r\n          navigate(`/documento/tipos/merge/${id}`);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs\r\n        title=\"Documentos\"\r\n        data={[\r\n          { title: \"Documentos\", link: \"/documentos\" },\r\n          { title: \"Tipos\", link: \"/documento/tipos\" },\r\n          { title: \"Novo item merge\" },\r\n        ]}\r\n      />\r\n      <Row>\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <Row>\r\n                  <Col className=\"mb-1\" xl=\"4\" md=\"6\" sm=\"12\">\r\n                    <Label className=\"form-label\" for=\"tipo\">\r\n                      Tipo\r\n                    </Label>\r\n\r\n                    <Controller\r\n                      id=\"tipo\"\r\n                      control={control}\r\n                      name=\"tipo\"\r\n                      render={({ field }) => (\r\n                        <Select\r\n                          options={selectTipo}\r\n                          classNamePrefix=\"select\"\r\n                          theme={selectThemeColors}\r\n                          className={classnames(\"react-select\", {\r\n                            \"is-invalid\":\r\n                            data !== null &&\r\n                            (data.tipo === undefined), \r\n                          })}\r\n                          isDisabled={item !== undefined ? true : false}\r\n                          {...field}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                  <Col className=\"mb-1\" xl=\"4\" md=\"6\" sm=\"12\">\r\n                    <Label className=\"form-label\" for=\"ordem\">\r\n                      Ordem\r\n                    </Label>\r\n                    <Controller\r\n                      defaultValue=\"\"\r\n                      control={control}\r\n                      id=\"ordem\"\r\n                      name=\"ordem\"\r\n                      render={({ field }) => (\r\n                        <Input\r\n                          placeholder=\"Ordem\"\r\n                          {...field}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                  \r\n                </Row>\r\n                <div className=\" text-end w-100\">\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Salvar\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DocumentosMergeForm;\r\n","import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useIsAuthenticated } from \"@azure/msal-react\";\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nimport { getToken } from \"../../services/Auth\";\r\n\r\nconst isAzure = () => {\r\n  let navigate = useNavigate();\r\n  const isAuthenticated = useIsAuthenticated();\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      navigate(\"/login\");\r\n    }else{\r\n      const payload = jwt.verify(getToken(), \"aIebX2X9oCZE1gCNFlE0lSxPAKVqJfL7+8WUcMVcz677+V6JnRomzKfg03EIR6VlSAf2kWQSiiTDP8MF3Js7is9i7+YdCPTw+sifbuNeeCZWLr1QJCrGaRacvD4qKzzpXNkNeKhDv0h6rQW/JJ8dX94rK5esVxtbupCptX8HzfL8rmUSLI/l78ddYfkb+RkuHH5PY8TYpdUBv1h3qUYo4L62QUX/Ze5wqhYUuhPvmOAYIoz7j4SABxT2JciOn9Wy1wraZ268VzhgLilykQBH5QC6lbNyfIegB79R0QYQrYk5IL1gfmxY2lKIDeCYB9p8NIF8qfCyD/RJMQOUEv9z9A==\");\r\n      if(!payload) {\r\n        navigate(\"/login\");\r\n      }\r\n    }\r\n  }, [isAuthenticated]);\r\n}\r\n\r\nexport default isAzure;","// ** React Imports\r\nimport { Fragment } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n// ** Third Party Components\r\nimport Proptypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem\r\n} from \"reactstrap\"\r\n\r\nconst BreadCrumbs = (props) => {\r\n  // ** Props\r\n  const { data, title } = props\r\n\r\n  const renderBreadCrumbs = () => {\r\n    return data.map((item, index) => {\r\n      const Wrapper = item.link ? Link : Fragment\r\n      const isLastItem = data.length - 1 === index\r\n      return (\r\n        <BreadcrumbItem\r\n          tag=\"li\"\r\n          key={index}\r\n          active={!isLastItem}\r\n          className={classnames({ \"text-primary\": !isLastItem })}\r\n        >\r\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\r\n            {item.title}\r\n          </Wrapper>\r\n        </BreadcrumbItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"content-header row\">\r\n      <div className=\"content-header-left col-md-9 col-12 mb-2\">\r\n        <div className=\"row breadcrumbs-top\">\r\n          <div className=\"col-12\">\r\n            {title ? (\r\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag=\"li\">\r\n                  <Link to=\"/\">Home</Link>\r\n                </BreadcrumbItem>\r\n                {renderBreadCrumbs()}\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  data: Proptypes.arrayOf(\r\n    Proptypes.shape({\r\n      link: Proptypes.string,\r\n      title: Proptypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n"],"sourceRoot":""}