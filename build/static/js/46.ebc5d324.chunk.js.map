{"version":3,"sources":["views/empresas/form/index.jsx","components/isAzure/index.jsx","@core/components/breadcrumbs/index.js","services/Funcoes.jsx"],"names":["MySwal","withReactContent","Swal","EmpresasForm","isAzure","_useForm","useForm","reset","control","handleSubmit","setError","navigate","formState","errors","useNavigate","id","useParams","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","undefined","useEffect","httpRequest","concat","method","token","getToken","then","res","razao_social","body","nome_fantasia","cnpj","formataCNPJ","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","link","Row","Col","sm","Card","CardBody","Form","onSubmit","length","dados","limpaValores","fire","icon","text","customClass","confirmButton","className","xl","md","Label","for","Controller","defaultValue","name","render","_ref","field","Input","_objectSpread","placeholder","classnames","_ref2","_ref3","Cleave","options","delimiters","blocks","delimiterLazyShow","numericOnly","numeralThousandsGroupStyle","Button","type","color","jwt","require","isAuthenticated","useIsAuthenticated","verify","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","isLastItem","active","formataCPF","cpf","replace","valor","match","join","dataPTBR","Date","toLocaleString","year","month","day","converterData","partes","split","converterDataAnoMes"],"mappings":"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","file":"static/js/46.ebc5d324.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardBody,\n  Form,\n  Label,\n  Input,\n  Row,\n  Col,\n  Button,\n} from \"reactstrap\";\n\n// ** Custom Components\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport Cleave from \"cleave.js/react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport classnames from \"classnames\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nconst MySwal = withReactContent(Swal);\nimport { useNavigate, useParams } from \"react-router-dom\";\n\n//components\nimport isAzure from \"../../../components/isAzure\";\nimport { limpaValores, formataCNPJ } from \"../../../services/Funcoes\";\nimport { getToken } from \"../../../services/Auth\";\nimport { httpRequest } from \"../../../services/Api\";\n\nconst EmpresasForm = () => {\n  isAzure();\n\n  const {\n    reset,\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  let navigate = useNavigate();\n  let { id } = useParams();\n\n  const [data, setData] = useState(null);\n  const [dados, setDados] = useState(null);\n\n  //verifica se é edição\n  if (id !== undefined) {\n    useEffect(() => {\n      httpRequest(`empresas/${id}`, {\n        method: \"GET\",\n        token: getToken(),\n      }).then((res) => {\n        reset({\n          razao_social: res.body.razao_social,\n          nome_fantasia: res.body.nome_fantasia,\n          cnpj: formataCNPJ(res.body.cnpj),\n        });\n      });\n    }, []);\n  }\n\n  const onSubmit = (data) => {\n    setData(data);\n    if (\n      data.razao_social !== \"\" &&\n      data.nome_fantasia !== \"\" &&\n      data.cnpj !== \"\" &&\n      data.cnpj.length === 18\n    ) {\n      const dados = {\n        razao_social: data.razao_social,\n        nome_fantasia: data.nome_fantasia,\n        cnpj: limpaValores(data.cnpj),\n      };\n      if (id === undefined) {\n        httpRequest(`empresas`, {\n          method: \"POST\",\n          body: dados,\n          token: getToken(),\n        }).then((res) => {\n          MySwal.fire({\n            icon: \"success\",\n            title: \"Sucesso!\",\n            text: \"Cadastro realizada com sucesso.\",\n            customClass: {\n              confirmButton: \"btn btn-success\",\n            },\n          });\n          navigate(\"/empresas\");\n        });\n      }else{\n        httpRequest(`empresas/${id}`, {\n          method: \"PUT\",\n          body: dados,\n          token: getToken(),\n        }).then((res) => {\n          MySwal.fire({\n            icon: \"success\",\n            title: \"Sucesso!\",\n            text: \"Cadastro atualizado com sucesso.\",\n            customClass: {\n              confirmButton: \"btn btn-success\",\n            },\n          });\n          navigate(\"/empresas\");\n        });\n      }\n    }\n  };\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"Empresas\"\n        data={[\n          { title: \"Empresas\", link: \"/empresas\" },\n          { title: \"Nova Empresa\" },\n        ]}\n      />\n      <Row>\n        <Col sm=\"12\">\n          <Card>\n            <CardBody>\n              <Form onSubmit={handleSubmit(onSubmit)}>\n                <Row>\n                  <Col className=\"mb-1\" xl=\"4\" md=\"6\" sm=\"12\">\n                    <Label className=\"form-label\" for=\"razao_social\">\n                      Razão Social\n                    </Label>\n                    <Controller\n                      defaultValue=\"\"\n                      control={control}\n                      id=\"razao_social\"\n                      name=\"razao_social\"\n                      render={({ field }) => (\n                        <Input\n                          placeholder=\"Razão Social\"\n                          className={classnames(\"form-control\", {\n                            \"is-invalid\":\n                              data !== null &&\n                              (data.razao_social === null ||\n                                !data.razao_social.length),\n                          })}\n                          {...field}\n                        />\n                      )}\n                    />\n                  </Col>\n                  <Col className=\"mb-1\" xl=\"4\" md=\"6\" sm=\"12\">\n                    <Label className=\"form-label\" for=\"nome_fantasia\">\n                      Nome Fantasia\n                    </Label>\n                    <Controller\n                      defaultValue=\"\"\n                      control={control}\n                      id=\"nome_fantasia\"\n                      name=\"nome_fantasia\"\n                      render={({ field }) => (\n                        <Input\n                          placeholder=\"Nome Fantasia\"\n                          className={classnames(\"form-control\", {\n                            \"is-invalid\":\n                              data !== null &&\n                              (data.nome_fantasia === null ||\n                                !data.nome_fantasia.length),\n                          })}\n                          {...field}\n                        />\n                      )}\n                    />\n                  </Col>\n                  <Col className=\"mb-1\" xl=\"4\" md=\"6\" sm=\"12\">\n                    <Label className=\"form-label\" for=\"cnpj\">\n                      CNPJ\n                    </Label>\n                    <Controller\n                      defaultValue=\"\"\n                      id=\"cnpj\"\n                      name=\"cnpj\"\n                      control={control}\n                      render={({ field }) => (\n                        <Cleave\n                          {...field}\n                          placeholder=\"00.000.000/0000-00\"\n                          className={classnames(\"form-control\", {\n                            \"is-invalid\":\n                              data !== null &&\n                              (data.cnpj === null ||\n                                !data.cnpj.length ||\n                                data.cnpj.length < 18),\n                          })}\n                          options={{\n                            delimiters: [\".\", \".\", \"/\", \"-\"],\n                            blocks: [2, 3, 3, 4, 2],\n                            delimiterLazyShow: true,\n                            numericOnly: true,\n                            numeralThousandsGroupStyle: \"thousand\",\n                          }}\n                        />\n                      )}\n                    />\n                  </Col>\n                </Row>\n                <div className=\" text-end w-100\">\n                  <Button type=\"submit\" color=\"primary\">\n                    Salvar\n                  </Button>\n                </div>\n              </Form>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n\nexport default EmpresasForm;\n","import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useIsAuthenticated } from \"@azure/msal-react\";\nconst jwt = require(\"jsonwebtoken\");\n\nimport { getToken } from \"../../services/Auth\";\n\nconst isAzure = () => {\n  let navigate = useNavigate();\n  const isAuthenticated = useIsAuthenticated();\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate(\"/login\");\n    }else{\n      const payload = jwt.verify(getToken(), \"aIebX2X9oCZE1gCNFlE0lSxPAKVqJfL7+8WUcMVcz677+V6JnRomzKfg03EIR6VlSAf2kWQSiiTDP8MF3Js7is9i7+YdCPTw+sifbuNeeCZWLr1QJCrGaRacvD4qKzzpXNkNeKhDv0h6rQW/JJ8dX94rK5esVxtbupCptX8HzfL8rmUSLI/l78ddYfkb+RkuHH5PY8TYpdUBv1h3qUYo4L62QUX/Ze5wqhYUuhPvmOAYIoz7j4SABxT2JciOn9Wy1wraZ268VzhgLilykQBH5QC6lbNyfIegB79R0QYQrYk5IL1gfmxY2lKIDeCYB9p8NIF8qfCyD/RJMQOUEv9z9A==\");\n      if(!payload) {\n        navigate(\"/login\");\n      }\n    }\n  }, [isAuthenticated]);\n}\n\nexport default isAzure;","// ** React Imports\nimport { Fragment } from \"react\"\nimport { Link } from \"react-router-dom\"\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\"\nimport classnames from \"classnames\"\n\n// ** Reactstrap Imports\nimport {\n  Breadcrumb,\n  BreadcrumbItem\n} from \"reactstrap\"\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment\n      const isLastItem = data.length - 1 === index\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      )\n    })\n  }\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Home</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired\n    })\n  )\n}\n","export function formataCPF(cpf) {\r\n    //retira os caracteres indesejados...\r\n    cpf = cpf.replace(/[^\\d]/g, \"\");\r\n  \r\n    //realizar a formatação...\r\n    return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");\r\n  }\r\n\r\n  \r\n  export function formataCNPJ(cnpj) {\r\n    //retira os caracteres indesejados...\r\n    cnpj = cnpj.replace(/[^\\d]/g, \"\");\r\n  \r\n    //realizar a formatação...\r\n    return cnpj.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, \"$1.$2.$3/$4-$5\");\r\n  }\r\n\r\n  export function limpaValores(valor) {\r\n    return valor.match(/\\d/g).join(\"\");\r\n  }\r\n  \r\n  export function dataPTBR(valor) {\r\n    let date = new Date(valor).toLocaleString(\"pt-BR\", {\r\n      year: \"numeric\",\r\n      month: \"numeric\",\r\n      day: \"numeric\",\r\n    });\r\n    return date;\r\n  }\r\n\r\n  export function converterData(data) {\r\n    const partes = data.split('/');\r\n    const dataReorganizada = [partes[2], partes[1], partes[0]];\r\n    return dataReorganizada.join('-');\r\n  }\r\n\r\n  export function converterDataAnoMes(data) {\r\n    const partes = data.split('/');\r\n    const dataReorganizada = [partes[1], partes[0]];\r\n    return dataReorganizada.join('-');\r\n  }"],"sourceRoot":""}