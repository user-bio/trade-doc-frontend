{"version":3,"sources":["components/isAzure/index.jsx","@core/components/breadcrumbs/index.js","services/Funcoes.jsx","views/empresas/form/index.jsx"],"names":["jwt","require","isAzure","navigate","useNavigate","isAuthenticated","useIsAuthenticated","useEffect","verify","getToken","BreadCrumbs","props","data","title","className","tag","to","map","item","index","Wrapper","link","Link","Fragment","isLastItem","length","active","classnames","formataCPF","cpf","replace","formataCNPJ","cnpj","limpaValores","valor","match","join","dataPTBR","Date","toLocaleString","year","month","day","converterData","partes","split","converterDataAnoMes","MySwal","withReactContent","Swal","EmpresasForm","useForm","reset","control","handleSubmit","setError","formState","errors","id","useParams","useState","setData","undefined","httpRequest","method","token","then","res","razao_social","body","nome_fantasia","sm","onSubmit","dados","fire","icon","text","customClass","confirmButton","xl","md","for","defaultValue","name","render","field","placeholder","options","delimiters","blocks","delimiterLazyShow","numericOnly","numeralThousandsGroupStyle","type","color"],"mappings":"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","file":"static/js/44.9b250cfb.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useIsAuthenticated } from \"@azure/msal-react\";\r\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nimport { getToken } from \"../../services/Auth\";\r\n\r\nconst isAzure = () => {\r\n  let navigate = useNavigate();\r\n  const isAuthenticated = useIsAuthenticated();\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) {\r\n      navigate(\"/login\");\r\n    }else{\r\n      const payload = jwt.verify(getToken(), \"aIebX2X9oCZE1gCNFlE0lSxPAKVqJfL7+8WUcMVcz677+V6JnRomzKfg03EIR6VlSAf2kWQSiiTDP8MF3Js7is9i7+YdCPTw+sifbuNeeCZWLr1QJCrGaRacvD4qKzzpXNkNeKhDv0h6rQW/JJ8dX94rK5esVxtbupCptX8HzfL8rmUSLI/l78ddYfkb+RkuHH5PY8TYpdUBv1h3qUYo4L62QUX/Ze5wqhYUuhPvmOAYIoz7j4SABxT2JciOn9Wy1wraZ268VzhgLilykQBH5QC6lbNyfIegB79R0QYQrYk5IL1gfmxY2lKIDeCYB9p8NIF8qfCyD/RJMQOUEv9z9A==\");\r\n      if(!payload) {\r\n        navigate(\"/login\");\r\n      }\r\n    }\r\n  }, [isAuthenticated]);\r\n}\r\n\r\nexport default isAzure;","// ** React Imports\r\nimport { Fragment } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n// ** Third Party Components\r\nimport Proptypes from \"prop-types\"\r\nimport classnames from \"classnames\"\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem\r\n} from \"reactstrap\"\r\n\r\nconst BreadCrumbs = (props) => {\r\n  // ** Props\r\n  const { data, title } = props\r\n\r\n  const renderBreadCrumbs = () => {\r\n    return data.map((item, index) => {\r\n      const Wrapper = item.link ? Link : Fragment\r\n      const isLastItem = data.length - 1 === index\r\n      return (\r\n        <BreadcrumbItem\r\n          tag=\"li\"\r\n          key={index}\r\n          active={!isLastItem}\r\n          className={classnames({ \"text-primary\": !isLastItem })}\r\n        >\r\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\r\n            {item.title}\r\n          </Wrapper>\r\n        </BreadcrumbItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"content-header row\">\r\n      <div className=\"content-header-left col-md-9 col-12 mb-2\">\r\n        <div className=\"row breadcrumbs-top\">\r\n          <div className=\"col-12\">\r\n            {title ? (\r\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag=\"li\">\r\n                  <Link to=\"/\">Home</Link>\r\n                </BreadcrumbItem>\r\n                {renderBreadCrumbs()}\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  data: Proptypes.arrayOf(\r\n    Proptypes.shape({\r\n      link: Proptypes.string,\r\n      title: Proptypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n","export function formataCPF(cpf) {\r\n    //retira os caracteres indesejados...\r\n    cpf = cpf.replace(/[^\\d]/g, \"\");\r\n  \r\n    //realizar a formatação...\r\n    return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");\r\n  }\r\n\r\n  \r\n  export function formataCNPJ(cnpj) {\r\n    //retira os caracteres indesejados...\r\n    cnpj = cnpj.replace(/[^\\d]/g, \"\");\r\n  \r\n    //realizar a formatação...\r\n    return cnpj.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, \"$1.$2.$3/$4-$5\");\r\n  }\r\n\r\n  export function limpaValores(valor) {\r\n    return valor.match(/\\d/g).join(\"\");\r\n  }\r\n  \r\n  export function dataPTBR(valor) {\r\n    let date = new Date(valor).toLocaleString(\"pt-BR\", {\r\n      year: \"numeric\",\r\n      month: \"numeric\",\r\n      day: \"numeric\",\r\n    });\r\n    return date;\r\n  }\r\n\r\n  export function converterData(data) {\r\n    const partes = data.split('/');\r\n    const dataReorganizada = [partes[2], partes[1], partes[0]];\r\n    return dataReorganizada.join('-');\r\n  }\r\n\r\n  export function converterDataAnoMes(data) {\r\n    const partes = data.split('/');\r\n    const dataReorganizada = [partes[1], partes[0]];\r\n    return dataReorganizada.join('-');\r\n  }","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  Label,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"reactstrap\";\r\n\r\n// ** Custom Components\r\nimport Breadcrumbs from \"@components/breadcrumbs\";\r\nimport Cleave from \"cleave.js/react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport classnames from \"classnames\";\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\nconst MySwal = withReactContent(Swal);\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n//components\r\nimport isAzure from \"../../../components/isAzure\";\r\nimport { limpaValores, formataCNPJ } from \"../../../services/Funcoes\";\r\nimport { getToken } from \"../../../services/Auth\";\r\nimport { httpRequest } from \"../../../services/Api\";\r\n\r\nconst EmpresasForm = () => {\r\n  isAzure();\r\n\r\n  const {\r\n    reset,\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  let navigate = useNavigate();\r\n  let { id } = useParams();\r\n\r\n  const [data, setData] = useState(null);\r\n  const [dados, setDados] = useState(null);\r\n\r\n  //verifica se é edição\r\n  if (id !== undefined) {\r\n    useEffect(() => {\r\n      httpRequest(`empresas/${id}`, {\r\n        method: \"GET\",\r\n        token: getToken(),\r\n      }).then((res) => {\r\n        reset({\r\n          razao_social: res.body.razao_social,\r\n          nome_fantasia: res.body.nome_fantasia,\r\n          cnpj: formataCNPJ(res.body.cnpj),\r\n        });\r\n      });\r\n    }, []);\r\n  }\r\n\r\n  const onSubmit = (data) => {\r\n    setData(data);\r\n    if (\r\n      data.razao_social !== \"\" &&\r\n      data.nome_fantasia !== \"\" &&\r\n      data.cnpj !== \"\" &&\r\n      data.cnpj.length === 18\r\n    ) {\r\n      const dados = {\r\n        razao_social: data.razao_social,\r\n        nome_fantasia: data.nome_fantasia,\r\n        cnpj: limpaValores(data.cnpj),\r\n      };\r\n      if (id === undefined) {\r\n        httpRequest(`empresas`, {\r\n          method: \"POST\",\r\n          body: dados,\r\n          token: getToken(),\r\n        }).then((res) => {\r\n          MySwal.fire({\r\n            icon: \"success\",\r\n            title: \"Sucesso!\",\r\n            text: \"Cadastro realizada com sucesso.\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-success\",\r\n            },\r\n          });\r\n          navigate(\"/empresas\");\r\n        });\r\n      }else{\r\n        httpRequest(`empresas/${id}`, {\r\n          method: \"PUT\",\r\n          body: dados,\r\n          token: getToken(),\r\n        }).then((res) => {\r\n          MySwal.fire({\r\n            icon: \"success\",\r\n            title: \"Sucesso!\",\r\n            text: \"Cadastro atualizado com sucesso.\",\r\n            customClass: {\r\n              confirmButton: \"btn btn-success\",\r\n            },\r\n          });\r\n          navigate(\"/empresas\");\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs\r\n        title=\"Empresas\"\r\n        data={[\r\n          { title: \"Empresas\", link: \"/empresas\" },\r\n          { title: \"Nova Empresa\" },\r\n        ]}\r\n      />\r\n      <Row>\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              <Form onSubmit={handleSubmit(onSubmit)}>\r\n                <Row>\r\n                  <Col className=\"mb-1\" xl=\"4\" md=\"6\" sm=\"12\">\r\n                    <Label className=\"form-label\" for=\"razao_social\">\r\n                      Razão Social\r\n                    </Label>\r\n                    <Controller\r\n                      defaultValue=\"\"\r\n                      control={control}\r\n                      id=\"razao_social\"\r\n                      name=\"razao_social\"\r\n                      render={({ field }) => (\r\n                        <Input\r\n                          placeholder=\"Razão Social\"\r\n                          className={classnames(\"form-control\", {\r\n                            \"is-invalid\":\r\n                              data !== null &&\r\n                              (data.razao_social === null ||\r\n                                !data.razao_social.length),\r\n                          })}\r\n                          {...field}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                  <Col className=\"mb-1\" xl=\"4\" md=\"6\" sm=\"12\">\r\n                    <Label className=\"form-label\" for=\"nome_fantasia\">\r\n                      Nome Fantasia\r\n                    </Label>\r\n                    <Controller\r\n                      defaultValue=\"\"\r\n                      control={control}\r\n                      id=\"nome_fantasia\"\r\n                      name=\"nome_fantasia\"\r\n                      render={({ field }) => (\r\n                        <Input\r\n                          placeholder=\"Nome Fantasia\"\r\n                          className={classnames(\"form-control\", {\r\n                            \"is-invalid\":\r\n                              data !== null &&\r\n                              (data.nome_fantasia === null ||\r\n                                !data.nome_fantasia.length),\r\n                          })}\r\n                          {...field}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                  <Col className=\"mb-1\" xl=\"4\" md=\"6\" sm=\"12\">\r\n                    <Label className=\"form-label\" for=\"cnpj\">\r\n                      CNPJ\r\n                    </Label>\r\n                    <Controller\r\n                      defaultValue=\"\"\r\n                      id=\"cnpj\"\r\n                      name=\"cnpj\"\r\n                      control={control}\r\n                      render={({ field }) => (\r\n                        <Cleave\r\n                          {...field}\r\n                          placeholder=\"00.000.000/0000-00\"\r\n                          className={classnames(\"form-control\", {\r\n                            \"is-invalid\":\r\n                              data !== null &&\r\n                              (data.cnpj === null ||\r\n                                !data.cnpj.length ||\r\n                                data.cnpj.length < 18),\r\n                          })}\r\n                          options={{\r\n                            delimiters: [\".\", \".\", \"/\", \"-\"],\r\n                            blocks: [2, 3, 3, 4, 2],\r\n                            delimiterLazyShow: true,\r\n                            numericOnly: true,\r\n                            numeralThousandsGroupStyle: \"thousand\",\r\n                          }}\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <div className=\" text-end w-100\">\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Salvar\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default EmpresasForm;\r\n"],"sourceRoot":""}